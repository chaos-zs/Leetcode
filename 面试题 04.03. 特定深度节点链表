class Solution {
    public:
        vector<ListNode*> listOfDepth(TreeNode* tree) {
            queue<TreeNode*> que;
            vector<ListNode*> ans;
            if (tree == NULL)
                return ans;
            que.push(tree);
            int n = que.size();
            while (!que.empty()) {
                ListNode* head = new ListNode(0);
                ListNode* list=new ListNode(0);
                head->next = list;
                for (int i = 0; i < n && !que.empty(); i++) {
                    TreeNode* cur = que.front();
                    list->next = new ListNode(cur->val);
                    list = list->next;
                    que.pop();
                    if (cur->left != NULL)
                        que.push(cur->left);
                    if (cur->right != NULL)
                        que.push(cur->right);
                }
                n = que.size();
                ans.push_back(head->next->next);
            }
            return ans;
        }
};
